{"version":3,"sources":["components/Login.js","containers/Login.js","components/Products.js","containers/Products.js","components/MyCart.js","containers/MyCart.js","App.js","containers/App.js","serviceWorker.js","reducers/user.js","reducers/shop.js","reducers/index.js","index.js"],"names":["Login","login","loginError","password","passwordError","onLoginChanged","onPasswordChanged","onSubmit","history","useHistory","from","useLocation","state","pathname","e","preventDefault","replace","className","htmlFor","value","type","id","placeholder","onChange","required","connect","user","userLogin","userLoginError","userPassword","userPasswordError","dispatch","payload","target","Products","products","addToCart","_addToCart","map","product","style","width","key","src","alt","onClick","bind","shop","MyCart","cartItems","removeFromCart","fullName","address","onFullNameChanged","onAddressChanged","submitOrder","_removeFromCart","_submitOrder","push","length","includes","renderCartItems","userFullName","userAddress","App","loadProducts","isOrderAccepted","logout","authenticated","_logout","PrivateRoute","children","rest","render","location","to","useEffect","data","alert","data-toggle","data-target","aria-controls","aria-expanded","aria-label","activeClassName","exact","href","path","Boolean","window","hostname","match","initialState","users","username","userReducer","action","update","$merge","trim","isLoginCorrect","isPasswordCorrect","forEach","orders","shopReducer","$push","indexToRemove","fromState","slice","item","index","splice","order","combineReducers","store","createStore","reducer","applyMiddleware","logger","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d03268cd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    useHistory,\n    useLocation\n} from \"react-router-dom\";\n\nfunction Login({login, loginError, password, passwordError, onLoginChanged, onPasswordChanged, onSubmit}) {\n\n    let history = useHistory();\n    let location = useLocation();\n    let { from } = location.state || { from: { pathname: \"/\" } };\n\n    function submit(e) {\n        e.preventDefault();\n        onSubmit();\n        history.replace(from);\n    }\n\n    return (\n        <div>\n            {from.pathname !== \"/\" && <p>You must log in to view the page at {from.pathname}</p>}\n            <form onSubmit={submit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputUsername\">Username {loginError && <span className=\"text-danger\">{loginError}</span>}</label>\n                    <input\n                        value={login}\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"exampleInputUsername\"\n                        placeholder=\"Enter username\"\n                        onChange={onLoginChanged}\n                        required\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputPassword\">Password {passwordError && <span className=\"text-danger\">{passwordError}</span>}</label>\n                    <input\n                        value={password}\n                        type=\"password\"\n                        className=\"form-control\"\n                        id=\"exampleInputPassword\"\n                        placeholder=\"Enter Password\"\n                        onChange={onPasswordChanged}\n                        required\n                    />\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n            </form>\n        </div>\n    );\n}\n\nLogin.propTypes = {\n    login: PropTypes.string.isRequired,\n    loginError: PropTypes.string,\n    password: PropTypes.string.isRequired,\n    passwordError: PropTypes.string,\n    onLoginChanged: PropTypes.func.isRequired,\n    onPasswordChanged: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Login;","import {connect} from 'react-redux';\nimport Login from \"../components/Login\";\n\nconst mapStateToProps = state => {\n    return {\n        login: state.user.userLogin,\n        loginError: state.user.userLoginError,\n        password: state.user.userPassword,\n        passwordError: state.user.userPasswordError,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLoginChanged: (e) => dispatch({\n            type: 'USER/LOGIN_CHANGED',\n            payload: {\n                value: e.target.value,\n            }\n        }),\n        onPasswordChanged: (e) => dispatch({\n            type: 'USER/PASSWORD_CHANGED',\n            payload: {\n                value: e.target.value,\n            }\n        }),\n        onSubmit: () => dispatch({\n            type: 'USER/SUBMIT_LOGIN_FORM',\n        }),\n    }\n};\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Login);","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Products({products, addToCart}) {\n    function _addToCart(id, e) {\n        e.preventDefault();\n        addToCart(id);\n    }\n\n    return (\n        <div className='product-list'>\n            {\n                products.map((product) => (\n                    <div className=\"card\" style={{width: '18rem'}} key={product.id}>\n                        <img className=\"card-img-top\" src={product['product-image-url']} alt={product['product-name']} />\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">{product['product-name']}</h5>\n                            <p className=\"card-text\">{product['header-top-right-text']}</p>\n                            <button className=\"btn btn-primary\" onClick={_addToCart.bind(this, product.id)}>Add to cart</button>\n                        </div>\n                    </div>\n                ))\n            }\n        </div>\n    );\n}\n\nProducts.propTypes = {\n    products: PropTypes.array.isRequired,\n    addToCart: PropTypes.func.isRequired,\n};\n\nexport default Products;","import {connect} from 'react-redux';\nimport Products from \"./../components/Products\";\n\nconst mapStateToProps = state => {\n    return {\n        products: state.shop.products,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        addToCart: (id) => dispatch({\n            type: 'SHOP/ADD_TOD_CART',\n            payload: {\n                id,\n            }\n        }),\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Products);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    useHistory,\n} from \"react-router-dom\";\n\nfunction MyCart({products, cartItems, removeFromCart, fullName, address, onFullNameChanged, onAddressChanged, submitOrder}) {\n\n    let history = useHistory();\n\n    function _removeFromCart(id, e) {\n        e.preventDefault();\n        removeFromCart(id);\n    }\n\n    function _submitOrder(e) {\n        e.preventDefault();\n        submitOrder();\n        history.push(`/products`);\n    }\n\n    function renderCartItems() {\n        return (\n            products.map((product) =>\n                (cartItems.includes(product['id'])) && (\n                    <div className=\"card\" style={{width: '18rem'}} key={product.id}>\n                        <img className=\"card-img-top\" src={product['product-image-url']} alt={product['product-name']} />\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">{product['product-name']}</h5>\n                            <p className=\"card-text\">{product['header-top-right-text']}</p>\n                            <button className=\"btn btn-danger\" onClick={_removeFromCart.bind(this, product.id)}>Remove</button>\n                        </div>\n                    </div>\n                )\n            )\n        );\n    }\n\n    function renderCartForm() {\n        return (\n            <form className=\"container mt-3\" onSubmit={_submitOrder}>\n                <h5>Order info:</h5>\n                <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputFullName\">Full Name</label>\n                    <input\n                        value={fullName}\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"exampleInputFullName\"\n                        placeholder=\"Enter Full Name\"\n                        onChange={onFullNameChanged}\n                        required\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputAddress\">Address</label>\n                    <input\n                        value={address}\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"exampleInputAddress\"\n                        placeholder=\"Enter Address\"\n                        onChange={onAddressChanged}\n                        required\n                    />\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">Submit Order</button>\n            </form>\n        );\n    }\n\n    return (\n        <div className='cart'>\n            {\n                cartItems.length\n                    ? <div className='cart-prod-form'>{renderCartItems()}{renderCartForm()}</div>\n                    : <p>Your Cart is empty</p>\n            }\n        </div>\n    );\n}\n\nMyCart.propTypes = {\n    products: PropTypes.array.isRequired,\n    cartItems: PropTypes.array.isRequired,\n    removeFromCart: PropTypes.func.isRequired,\n    fullName: PropTypes.string.isRequired,\n    address: PropTypes.string.isRequired,\n    onFullNameChanged: PropTypes.func.isRequired,\n    onAddressChanged: PropTypes.func.isRequired,\n    submitOrder: PropTypes.func.isRequired,\n};\n\nexport default MyCart;","import {connect} from 'react-redux';\nimport MyCart from \"./../components/MyCart\";\n\nconst mapStateToProps = state => {\n    return {\n        products: state.shop.products,\n        cartItems: state.shop.cartItems,\n        fullName: state.shop.userFullName,\n        address: state.shop.userAddress,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        removeFromCart: (id) => dispatch({\n            type: 'SHOP/REMOVE_FROM_CART',\n            payload: {\n                id,\n            }\n        }),\n        onFullNameChanged: (e) => dispatch({\n            type: 'SHOP/FULL_NAME_CHANGED',\n            payload: {\n                value: e.target.value,\n            }\n        }),\n        onAddressChanged: (e) => dispatch({\n            type: 'SHOP/ADDRESS_CHANGED',\n            payload: {\n                value: e.target.value,\n            }\n        }),\n        submitOrder: () => dispatch({\n            type: 'SHOP/SUBMIT_ORDER',\n        }),\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(MyCart);","import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport {\n    Switch,\n    Route,\n    NavLink,\n    Redirect,\n} from \"react-router-dom\";\n\nimport Login from './containers/Login';\nimport Products from './containers/Products';\nimport MyCart from './containers/MyCart';\n\nimport data from './data/data';\n\nfunction App({loadProducts, products, cartItems, isOrderAccepted, logout, authenticated}) {\n    useEffect(() => {\n        loadProducts(data);\n    }, []);\n\n    useEffect(() => {\n        if (isOrderAccepted === true) {\n            alert('Order is accepted!');\n        }\n    }, [isOrderAccepted]);\n\n    useEffect(() => {\n        if (authenticated === true) {\n            alert('Success!');\n        }\n    }, [authenticated]);\n\n    function _logout(e) {\n        e.preventDefault();\n        logout();\n    }\n\n    function renderNavigation() {\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item\">\n                            <NavLink className='nav-link' activeClassName='active' to=\"/\" exact>Home</NavLink>\n                        </li>\n                        <li className=\"nav-item\">\n                            {\n                                (authenticated === true)\n                                    ? <a className='nav-link' href=\"logout\" onClick={_logout}>Logout</a>\n                                    : <NavLink className='nav-link' activeClassName='active' to=\"/login\">Login</NavLink>\n                            }\n                        </li>\n                        <li className=\"nav-item\">\n                            <NavLink className='nav-link' activeClassName='active' to=\"/products\">Products ({products.length})</NavLink>\n                        </li>\n                        <li className=\"nav-item\">\n                            <NavLink className='nav-link' activeClassName='active' to=\"/cart\">My Cart ({cartItems.length})</NavLink>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        );\n    }\n\n    function PrivateRoute({ children, ...rest }) {\n        return (\n            <Route\n                {...rest}\n                render={({ location }) =>\n                    (authenticated === true)\n                        ? (children)\n                        : ( <Redirect to={{pathname: \"/login\", state: { from: location } }} /> )\n                }\n            />\n        );\n    }\n\n    return (\n        <div className=\"container\">\n            {renderNavigation()}\n            <h1>Webshop</h1>\n\n            <Switch>\n                <Route path=\"/\" exact>\n                    <h3>Hello to Webshop!</h3>\n                </Route>\n                <Route path=\"/login\">\n                    <Login />\n                </Route>\n                <PrivateRoute path=\"/products\">\n                    <Products />\n                </PrivateRoute>\n                <PrivateRoute path=\"/cart\">\n                    <MyCart />\n                </PrivateRoute>\n            </Switch>\n        </div>\n    );\n}\n\nApp.propTypes = {\n    loadProducts: PropTypes.func.isRequired,\n    products: PropTypes.array.isRequired,\n    cartItems: PropTypes.array.isRequired,\n    isOrderAccepted: PropTypes.bool.isRequired,\n    logout: PropTypes.func.isRequired,\n    authenticated: PropTypes.bool.isRequired,\n};\n\nexport default App;","import {connect} from 'react-redux';\nimport App from \"./../App\";\n\nconst mapStateToProps = state => {\n    return {\n        authenticated: state.user.authenticated,\n        products: state.shop.products,\n        cartItems: state.shop.cartItems,\n        isOrderAccepted: state.shop.isOrderAccepted,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        loadProducts: (data) => dispatch({\n            type: 'SHOP/SAVE_DATA',\n            payload: {\n                data,\n            }\n        }),\n        logout: () => dispatch({\n            type: 'USER/LOGOUT',\n        }),\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import update from 'immutability-helper';\n\nconst initialState = {\n    userLogin: '',\n    userLoginError: '',\n    userPassword: '',\n    userPasswordError: '',\n    users: [{\n        id: 1,\n        username: 'vasya',\n        password: 'aysav',\n    }, {\n        id: 2,\n        username: 'petya',\n        password: 'aytep',\n    }],\n    authenticated: false,\n};\n\nfunction userReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'USER/LOGIN_CHANGED':\n            return update(state, {\n                $merge:\n                    {\n                        userLogin: action.payload.value,\n                        userLoginError: '',\n                    }\n            });\n        case 'USER/PASSWORD_CHANGED':\n            return update(state, {\n                $merge:\n                    {\n                        userPassword: action.payload.value,\n                        userPasswordError: '',\n                    }\n            });\n        case 'USER/SUBMIT_LOGIN_FORM':\n            if (!state.userLogin.trim()) {\n                return update(state, {\n                    $merge:\n                        {\n                            userLogin: '',\n                            userLoginError: 'cannot be empty',\n                        }\n                });\n            }\n            if (state.userPassword.length < 5) {\n                return update(state, {\n                    $merge:\n                        {\n                            userLoginError: '',\n                            userPasswordError: 'must have at least 5 characters',\n                        }\n                });\n            }\n            if (!state.userPassword.trim()) {\n                return update(state, {\n                    $merge:\n                        {\n                            userLoginError: '',\n                            userPasswordError: 'cannot be empty',\n                        }\n                });\n            }\n            else {\n                let isLoginCorrect = 'incorrect or';\n                let isPasswordCorrect = 'incorrect';\n                let authenticated = false;\n\n                initialState.users.forEach((user) => {\n                    if (user.username === state.userLogin && user.password === state.userPassword) {\n                        isLoginCorrect = 'login correct';\n                        isPasswordCorrect = 'password correct';\n                        authenticated = true;\n                    }\n                });\n\n                return update(state, {\n                    $merge:\n                        {\n                            authenticated,\n                            userLogin: '',\n                            userLoginError: isLoginCorrect,\n                            userPassword: '',\n                            userPasswordError: isPasswordCorrect,\n                        }\n                });\n            }\n        case 'USER/LOGOUT':\n            return update(state, {\n                $merge:\n                    {\n                        userLoginError: initialState.userLoginError,\n                        userPasswordError: initialState.userPasswordError,\n                        authenticated: false,\n                    }\n            });\n        default:\n            return state\n    }\n}\n\nexport default userReducer;","import update from 'immutability-helper';\n\nconst initialState = {\n    products: [],\n    cartItems: [],\n    userFullName: '',\n    userAddress: '',\n    orders: [],\n    isOrderAccepted: false,\n};\n\nfunction shopReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'SHOP/SAVE_DATA':\n            return update(state, {\n                products: {\n                    $push: action.payload.data,\n                }\n            });\n        case 'SHOP/ADD_TOD_CART':\n            if (!action.payload.id || state.cartItems.includes(action.payload.id)) {\n                return state;\n            }\n\n            return update(state, {\n                cartItems: {\n                    $push: [action.payload.id],\n                },\n                $merge:\n                    {\n                        isOrderAccepted: false,\n                    }\n            });\n        case 'SHOP/REMOVE_FROM_CART':\n            const fromState = state.cartItems.slice();\n\n            let indexToRemove;\n            fromState.forEach((item, index) => {\n                if (item === action.payload.id) {\n                    indexToRemove = index;\n                }\n            });\n\n            fromState.splice(indexToRemove, 1);\n\n            return update(state, {\n                $merge:\n                    {\n                        cartItems: fromState,\n                    }\n            });\n        case 'SHOP/FULL_NAME_CHANGED':\n            return update(state, {\n                $merge:\n                    {\n                        userFullName: action.payload.value,\n                    }\n            });\n        case 'SHOP/ADDRESS_CHANGED':\n            return update(state, {\n                $merge:\n                    {\n                        userAddress: action.payload.value,\n                    }\n            });\n        case 'SHOP/SUBMIT_ORDER':\n            return update(state, {\n                orders: {\n                    $push: [{\n                        id: state.orders.length + 1,\n                        address: state.userAddress,\n                        fullName: state.userFullName,\n                        order: state.cartItems,\n                    }],\n                },\n                $merge:\n                    {\n                        cartItems: initialState.cartItems,\n                        userFullName: initialState.userFullName,\n                        userAddress: initialState.userAddress,\n                        isOrderAccepted: true,\n                    }\n            });\n        default:\n            return state\n    }\n}\n\nexport default shopReducer;","import { combineReducers } from 'redux'\n\nimport user from './user';\nimport shop from './shop';\n\nexport default combineReducers({ user, shop });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore, applyMiddleware} from 'redux'\nimport reducer from './reducers';\nimport {Provider} from 'react-redux';\nimport logger from 'redux-logger';\nimport {\n    BrowserRouter as Router,\n} from \"react-router-dom\";\n\nconst store = createStore(reducer, applyMiddleware(logger));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}